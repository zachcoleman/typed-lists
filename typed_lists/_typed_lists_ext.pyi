from typing import Dict, Iterable, Iterator, Union

def _initialize_global_thread_pool(num_threads: int) -> None: ...

class IntTypedList:
    # base
    def __init__(self, data: Iterable[int]) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: Union[int, slice]) -> Union[int, IntTypedList]: ...
    def __setitem__(self, index: int, value: int) -> None: ...
    def __delitem__(self, index: int) -> None: ...
    def __iter__(self) -> Iterator[int]: ...
    def __next__(self) -> int: ...
    def __contains__(self, value: int) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def append(self, value: int) -> None: ...
    def extend(self, values: Iterable[int]) -> None: ...

    # numeric
    def __add__(self, other: Union[IntTypedList, int]) -> IntTypedList: ...
    def __sub__(self, other: Union[IntTypedList, int]) -> IntTypedList: ...
    def __mul__(self, other: Union[IntTypedList, int]) -> IntTypedList: ...
    def __truediv__(self, other: Union[IntTypedList, int]) -> IntTypedList: ...

    # sort
    def sort(self) -> None: ...

    # hash
    def unique(self) -> IntTypedList: ...
    def count(self) -> Dict[int, int]: ...

class FloatTypedList:
    def __init__(self, data: Iterable[float]) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: Union[int, slice]) -> Union[float, FloatTypedList]: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __delitem__(self, index: int) -> None: ...
    def __iter__(self) -> Iterator[float]: ...
    def __next__(self) -> float: ...
    def __contains__(self, value: float) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def append(self, value: float) -> None: ...
    def extend(self, values: Iterable[float]) -> None: ...

    # numeric
    def __add__(sefl, other: Union[FloatTypedList, float]) -> FloatTypedList: ...
    def __sub__(self, other: Union[FloatTypedList, float]) -> FloatTypedList: ...
    def __mul__(self, other: Union[FloatTypedList, float]) -> FloatTypedList: ...
    def __truediv__(self, other: Union[FloatTypedList, float]) -> FloatTypedList: ...

    # sort
    def sort(self) -> None: ...

class StringTypedList:
    def __init__(self, data: Iterable[str]) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: Union[int, slice]) -> Union[StringTypedList, str]: ...
    def __setitem__(self, index: int, value: str) -> None: ...
    def __delitem__(self, index: int) -> None: ...
    def __iter__(self) -> Iterator[str]: ...
    def __next__(self) -> str: ...
    def __contains__(self, value: str) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def append(self, value: str) -> None: ...
    def extend(self, values: Iterable[str]) -> None: ...

    # sort
    def sort(self) -> None: ...

    # hash
    def unique(self) -> StringTypedList: ...
    def count(self) -> Dict[str, int]: ...

class BoolTypedList:
    def __init__(self, data: Iterable[bool]) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: Union[int, slice]) -> Union[BoolTypedList, bool]: ...
    def __setitem__(self, index: int, value: bool) -> None: ...
    def __delitem__(self, index: int) -> None: ...
    def __iter__(self) -> Iterator[bool]: ...
    def __next__(self) -> bool: ...
    def __contains__(self, value: bool) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def append(self, value: bool) -> None: ...
    def extend(self, values: Iterable[bool]) -> None: ...

    # sort
    def sort(self) -> None: ...

    # hash
    def unique(self) -> BoolTypedList: ...
    def count(self) -> Dict[bool, int]: ...
